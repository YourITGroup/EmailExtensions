name: Refactored.Email - Release

on:
  push:
    branches: [ master ]

env:
  SOLUTION: Refactored.Email.sln
  PLUGIN_PROJECT: Refactored.Email\Refactored.Email.csproj
  CORE_PROJECT: Refactored.Email.Core\Refactored.Email.Core.csproj
  OUTPUT_PATH: ${{ github.workspace }}\.output
  
jobs:
  publish-nuget:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Get Release Version
      id: package_version
      uses: KageKirin/get-csproj-version@v0.0.1
      with:
        file: ${{ env.PLUGIN_PROJECT }}
        regex: ^(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
        
    - name: Check Version v${{ steps.package_version.outputs.version }} Pre-Release state
      id: check_prerelease
      run: |
        if ('${{ steps.package_version.outputs.version }}' -match '^[0-9]+\.[0-9]+\.[0-9]+-.+$') {
            echo "Pre-Release detected"
            echo "::set-output name=prerelease::true"
        } else {
            "echo Pre-Release NOT detected"
            echo "::set-output name=prerelease::false"
        }
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Restore NuGet packages
      run: msbuild ${{ env.SOLUTION }} -t:restore

    - name: Create Nuget Packages
      run: msbuild ${{ env.SOLUTION }} -p:Configuration=Release -p:GeneratePackageOnBuild=true -p:PackageOutputPath=${{ env.OUTPUT_PATH }}
      
    - name: Publish to NuGet
      run: dotnet nuget push "${{ env.OUTPUT_PATH }}\*.nupkg" --skip-duplicate --api-key "$env:apiKey" -s https://api.nuget.org/v3/index.json
      env:
        apiKey: ${{ secrets.NUGET_API_KEY }}

    - uses: avakar/tag-and-release@v1
      name: Create Release Tag v${{ steps.package_version.outputs.version }}
      id: release
      with:
        tag_name: v${{ steps.package_version.outputs.version }}
        prerelease: ${{ steps.check_prerelease.outputs.prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Release information for v${{ steps.package_version.outputs.version }}
      run: |
        echo Release Id: ${{ steps.release.outputs.id }}
        echo Upload URL: "${{ steps.release.outputs.upload_url }}"
        echo Release URL: "${{ steps.release.outputs.html_url }}"
